# week08/.github/workflows/backend_ci.yml

name: Backend CI - Test, Build and Push Images to ACR

# Trigger the workflow on pushes to the 'main' branch
# You can also add 'pull_request:' to run on PRs
on:
  # Manual trigger
  workflow_dispatch:

  # Automatically on pushes to main branch
  push:
    branches:
      - main
      - testing
    paths: # Only trigger if changes are in backend directories
      - 'backend/**'
      - '.github/workflows/backend_ci.yml' # Trigger if this workflow file changes

    
# Define global environment variables that can be used across jobs
env:
  # ACR Login Server (e.g., myregistry.azurecr.io)
  # This needs to be set as a GitHub Repository Secret
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  # IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  IMAGE_TAG: v0

jobs:
  # Job 1: Run tests and linting for all backend services
  test_and_lint_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    services:
      # Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5431:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        # Make pg_isready available so the service is healthy before tests run
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
      
    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.10'

      # 3. Statistic code analysis
      - name: Code Quality Checks
        continue-on-error: true # Do not fail the job if linting fails
        run: |
          pip install flake8 bandit
          flake8 backend/order_service
          bandit -r backend/order_service
    
      # 4. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Wait for Postgres services to be healthy
      - name: Wait for Postgres to be ready
        run: |
          for port in 5431 5432 5433; do
            until pg_isready -h localhost -p $port -U postgres; do
              echo "Waiting for postgres on port $port..."
              sleep 2
            done
          done

      # 6. Run tests for customer service
      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5431
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 7. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 8. Run tests for product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  # Job 2: Build and Push Docker Images (runs only if tests pass)
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
    # 1. Checkout the repository code to the runner
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Azure login using a Service Principal secret
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Needs to be set as a GitHub Secret (Service Principal JSON)

    # 3. Login to Azure Container Registry (ACR)
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
    
    # 4. Determine next image version based on existing tags in ACR
    - name: Determine next image version
      id: version
      run: |
        # customer service
        if az acr repository show --name ${{ env.ACR_LOGIN_SERVER }} --repository customer_service >/dev/null 2>&1; then
          latest_customer=$(az acr repository show-tags --name ${{ env.ACR_LOGIN_SERVER }} --repository customer_service --query "sort(@)[-1]" -o tsv)
          latest_customer_version=$(( ${latest_customer#v} + 1 ))
        else
          latest_customer_version=1
        fi
        echo "CUSTOMER_VERSION=v$latest_customer_version" >> $GITHUB_ENV

        # Product service
        if az acr repository show --name ${{ env.ACR_LOGIN_SERVER }} --repository product_service >/dev/null 2>&1; then
          latest=$(az acr repository show-tags --name ${{ env.ACR_LOGIN_SERVER }} --repository product_service --query "sort(@)[-1]" -o tsv)
          latest_version=$(( ${latest#v} + 1 ))
        else
          latest_version=1
        fi
        echo "PRODUCT_VERSION=v$latest_version" >> $GITHUB_ENV

        # Order service
        if az acr repository show --name ${{ env.ACR_LOGIN_SERVER }} --repository order_service >/dev/null 2>&1; then
          latest_order=$(az acr repository show-tags --name ${{ env.ACR_LOGIN_SERVER }} --repository order_service --query "sort(@)[-1]" -o tsv)
          latest_order_version=$(( ${latest_order#v} + 1 ))
        else
          latest_order_version=1
        fi
        echo "ORDER_VERSION=v$latest_order_version" >> $GITHUB_ENV

  
    # 5. Build and Push Docker image for Customer Service
    - name: Build and Push Customer Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.CUSTOMER_VERSION }} ./backend/customer_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.CUSTOMER_VERSION }}

    # 6. Build and Push Docker image for Product Service
    - name: Build and Push Product Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.PRODUCT_VERSION }} ./backend/product_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.PRODUCT_VERSION }}

    # 7. Build and Push Docker image for Order Service
    - name: Build and Push Order Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.ORDER_VERSION }} ./backend/order_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.ORDER_VERSION }}

    # 8. Ensure Docker Scout is installed
    - name: Install Docker Scout
      run: |
        set -e
        docker --version
        curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh
        export PATH="$HOME/.docker/cli-plugins:$PATH"
        docker scout version

    # 9. Run Docker Scout to analyze images
    - name: Docker Scout Analysis
      run: |
        set -e

        echo "Scanning Customer Service..."
        docker scout cves ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.CUSTOMER_VERSION }} > customer_report.txt
        echo "Scanning Product Service..."
        docker scout cves ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.PRODUCT_VERSION }} > product_report.txt
        echo "Scanning Order Service..."
        docker scout cves ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.ORDER_VERSION }} > order_report.txt
        
        echo "==== Customer Service ====" > full_report.txt
        cat customer_report.txt >> full_report.txt
        echo "==== Product Service ====" >> full_report.txt
        cat product_report.txt >> full_report.txt
        echo "==== Order Service ====" >> full_report.txt
        cat order_report.txt >> full_report.txt

        cat full_report.txt

    # 10. Logout from Azure for security (runs even if image push fails)
    - name: Logout from Azure
      run: az logout
      if: always()
